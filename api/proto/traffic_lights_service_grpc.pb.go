// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/traffic_lights_service.proto

package go_traffic_lights

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrafficLightsService_ListProviders_FullMethodName = "/proto.TrafficLightsService/ListProviders"
	TrafficLightsService_ReadProvider_FullMethodName  = "/proto.TrafficLightsService/ReadProvider"
	TrafficLightsService_Register_FullMethodName      = "/proto.TrafficLightsService/Register"
	TrafficLightsService_Login_FullMethodName         = "/proto.TrafficLightsService/Login"
)

// TrafficLightsServiceClient is the client API for TrafficLightsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficLightsServiceClient interface {
	ListProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProviderResponse, error)
	ReadProvider(ctx context.Context, in *ReadProviderRequest, opts ...grpc.CallOption) (*ReadProviderResponse, error)
	Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type trafficLightsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficLightsServiceClient(cc grpc.ClientConnInterface) TrafficLightsServiceClient {
	return &trafficLightsServiceClient{cc}
}

func (c *trafficLightsServiceClient) ListProviders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProviderResponse)
	err := c.cc.Invoke(ctx, TrafficLightsService_ListProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficLightsServiceClient) ReadProvider(ctx context.Context, in *ReadProviderRequest, opts ...grpc.CallOption) (*ReadProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadProviderResponse)
	err := c.cc.Invoke(ctx, TrafficLightsService_ReadProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficLightsServiceClient) Register(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TrafficLightsService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficLightsServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, TrafficLightsService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficLightsServiceServer is the server API for TrafficLightsService service.
// All implementations must embed UnimplementedTrafficLightsServiceServer
// for forward compatibility.
type TrafficLightsServiceServer interface {
	ListProviders(context.Context, *emptypb.Empty) (*ListProviderResponse, error)
	ReadProvider(context.Context, *ReadProviderRequest) (*ReadProviderResponse, error)
	Register(context.Context, *RegistrationRequest) (*emptypb.Empty, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedTrafficLightsServiceServer()
}

// UnimplementedTrafficLightsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrafficLightsServiceServer struct{}

func (UnimplementedTrafficLightsServiceServer) ListProviders(context.Context, *emptypb.Empty) (*ListProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedTrafficLightsServiceServer) ReadProvider(context.Context, *ReadProviderRequest) (*ReadProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProvider not implemented")
}
func (UnimplementedTrafficLightsServiceServer) Register(context.Context, *RegistrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTrafficLightsServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTrafficLightsServiceServer) mustEmbedUnimplementedTrafficLightsServiceServer() {}
func (UnimplementedTrafficLightsServiceServer) testEmbeddedByValue()                              {}

// UnsafeTrafficLightsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficLightsServiceServer will
// result in compilation errors.
type UnsafeTrafficLightsServiceServer interface {
	mustEmbedUnimplementedTrafficLightsServiceServer()
}

func RegisterTrafficLightsServiceServer(s grpc.ServiceRegistrar, srv TrafficLightsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrafficLightsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrafficLightsService_ServiceDesc, srv)
}

func _TrafficLightsService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficLightsServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficLightsService_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficLightsServiceServer).ListProviders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficLightsService_ReadProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficLightsServiceServer).ReadProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficLightsService_ReadProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficLightsServiceServer).ReadProvider(ctx, req.(*ReadProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficLightsService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficLightsServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficLightsService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficLightsServiceServer).Register(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficLightsService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficLightsServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficLightsService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficLightsServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrafficLightsService_ServiceDesc is the grpc.ServiceDesc for TrafficLightsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrafficLightsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TrafficLightsService",
	HandlerType: (*TrafficLightsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProviders",
			Handler:    _TrafficLightsService_ListProviders_Handler,
		},
		{
			MethodName: "ReadProvider",
			Handler:    _TrafficLightsService_ReadProvider_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _TrafficLightsService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TrafficLightsService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/traffic_lights_service.proto",
}
