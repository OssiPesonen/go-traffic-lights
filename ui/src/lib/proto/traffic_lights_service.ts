/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.2
 * source: traffic_lights_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace proto {
    export class ReadProviderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): ReadProviderRequest {
            const message = new ReadProviderRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadProviderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadProviderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadProviderRequest {
            return ReadProviderRequest.deserialize(bytes);
        }
    }
    export class ReadProviderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            name?: string;
            city?: string;
            region?: string;
            line_of_business?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("line_of_business" in data && data.line_of_business != undefined) {
                    this.line_of_business = data.line_of_business;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get line_of_business() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set line_of_business(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: number;
            name?: string;
            city?: string;
            region?: string;
            line_of_business?: string;
        }): ReadProviderResponse {
            const message = new ReadProviderResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.line_of_business != null) {
                message.line_of_business = data.line_of_business;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                name?: string;
                city?: string;
                region?: string;
                line_of_business?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.line_of_business != null) {
                data.line_of_business = this.line_of_business;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.city.length)
                writer.writeString(3, this.city);
            if (this.region.length)
                writer.writeString(4, this.region);
            if (this.line_of_business.length)
                writer.writeString(5, this.line_of_business);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadProviderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadProviderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.city = reader.readString();
                        break;
                    case 4:
                        message.region = reader.readString();
                        break;
                    case 5:
                        message.line_of_business = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadProviderResponse {
            return ReadProviderResponse.deserialize(bytes);
        }
    }
    export class CreateProviderRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            city?: string;
            region?: string;
            line_of_business?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("line_of_business" in data && data.line_of_business != undefined) {
                    this.line_of_business = data.line_of_business;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get line_of_business() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set line_of_business(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            city?: string;
            region?: string;
            line_of_business?: string;
        }): CreateProviderRequest {
            const message = new CreateProviderRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.line_of_business != null) {
                message.line_of_business = data.line_of_business;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                city?: string;
                region?: string;
                line_of_business?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.line_of_business != null) {
                data.line_of_business = this.line_of_business;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.city.length)
                writer.writeString(3, this.city);
            if (this.region.length)
                writer.writeString(4, this.region);
            if (this.line_of_business.length)
                writer.writeString(5, this.line_of_business);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProviderRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProviderRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.city = reader.readString();
                        break;
                    case 4:
                        message.region = reader.readString();
                        break;
                    case 5:
                        message.line_of_business = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProviderRequest {
            return CreateProviderRequest.deserialize(bytes);
        }
    }
    export class CreateProviderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): CreateProviderResponse {
            const message = new CreateProviderResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateProviderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateProviderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateProviderResponse {
            return CreateProviderResponse.deserialize(bytes);
        }
    }
    export class ListProviderResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            providers?: ReadProviderResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("providers" in data && data.providers != undefined) {
                    this.providers = data.providers;
                }
            }
        }
        get providers() {
            return pb_1.Message.getRepeatedWrapperField(this, ReadProviderResponse, 1) as ReadProviderResponse[];
        }
        set providers(value: ReadProviderResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            providers?: ReturnType<typeof ReadProviderResponse.prototype.toObject>[];
        }): ListProviderResponse {
            const message = new ListProviderResponse({});
            if (data.providers != null) {
                message.providers = data.providers.map(item => ReadProviderResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                providers?: ReturnType<typeof ReadProviderResponse.prototype.toObject>[];
            } = {};
            if (this.providers != null) {
                data.providers = this.providers.map((item: ReadProviderResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.providers.length)
                writer.writeRepeatedMessage(1, this.providers, (item: ReadProviderResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListProviderResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListProviderResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.providers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ReadProviderResponse.deserialize(reader), ReadProviderResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListProviderResponse {
            return ListProviderResponse.deserialize(bytes);
        }
    }
    export class RefreshTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
            }
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            refresh_token?: string;
        }): RefreshTokenRequest {
            const message = new RefreshTokenRequest({});
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_token?: string;
            } = {};
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_token.length)
                writer.writeString(1, this.refresh_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.refresh_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshTokenRequest {
            return RefreshTokenRequest.deserialize(bytes);
        }
    }
    export class RegistrationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
            username?: string;
        }): RegistrationRequest {
            const message = new RegistrationRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
                username?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegistrationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegistrationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegistrationRequest {
            return RegistrationRequest.deserialize(bytes);
        }
    }
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class TokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[5]];
        constructor(data?: any[] | ({
            access_token?: string;
            exp?: number;
            token_type?: string;
            refresh_token?: string;
        } & (({
            scope?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
                if ("exp" in data && data.exp != undefined) {
                    this.exp = data.exp;
                }
                if ("token_type" in data && data.token_type != undefined) {
                    this.token_type = data.token_type;
                }
                if ("refresh_token" in data && data.refresh_token != undefined) {
                    this.refresh_token = data.refresh_token;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get exp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set exp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get token_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get refresh_token() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set refresh_token(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_scope() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get _scope() {
            const cases: {
                [index: number]: "none" | "scope";
            } = {
                0: "none",
                5: "scope"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        static fromObject(data: {
            access_token?: string;
            exp?: number;
            token_type?: string;
            refresh_token?: string;
            scope?: string;
        }): TokenResponse {
            const message = new TokenResponse({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            if (data.exp != null) {
                message.exp = data.exp;
            }
            if (data.token_type != null) {
                message.token_type = data.token_type;
            }
            if (data.refresh_token != null) {
                message.refresh_token = data.refresh_token;
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
                exp?: number;
                token_type?: string;
                refresh_token?: string;
                scope?: string;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            if (this.exp != null) {
                data.exp = this.exp;
            }
            if (this.token_type != null) {
                data.token_type = this.token_type;
            }
            if (this.refresh_token != null) {
                data.refresh_token = this.refresh_token;
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (this.exp != 0)
                writer.writeInt32(2, this.exp);
            if (this.token_type.length)
                writer.writeString(3, this.token_type);
            if (this.refresh_token.length)
                writer.writeString(4, this.refresh_token);
            if (this.has_scope)
                writer.writeString(5, this.scope);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    case 2:
                        message.exp = reader.readInt32();
                        break;
                    case 3:
                        message.token_type = reader.readString();
                        break;
                    case 4:
                        message.refresh_token = reader.readString();
                        break;
                    case 5:
                        message.scope = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenResponse {
            return TokenResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTrafficLightsServiceService {
        static definition = {
            ListProviders: {
                path: "/proto.TrafficLightsService/ListProviders",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListProviderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListProviderResponse.deserialize(new Uint8Array(bytes))
            },
            ReadProvider: {
                path: "/proto.TrafficLightsService/ReadProvider",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReadProviderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadProviderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReadProviderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReadProviderResponse.deserialize(new Uint8Array(bytes))
            },
            CreateProvider: {
                path: "/proto.TrafficLightsService/CreateProvider",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateProviderRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateProviderRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateProviderResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateProviderResponse.deserialize(new Uint8Array(bytes))
            },
            GetToken: {
                path: "/proto.TrafficLightsService/GetToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TokenResponse.deserialize(new Uint8Array(bytes))
            },
            RegisterUser: {
                path: "/proto.TrafficLightsService/RegisterUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegistrationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegistrationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            RefreshToken: {
                path: "/proto.TrafficLightsService/RefreshToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefreshTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefreshTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TokenResponse.deserialize(new Uint8Array(bytes))
            },
            RevokeRefreshToken: {
                path: "/proto.TrafficLightsService/RevokeRefreshToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RefreshTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RefreshTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            RevokeAllRefreshTokens: {
                path: "/proto.TrafficLightsService/RevokeAllRefreshTokens",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ListProviders(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, ListProviderResponse>, callback: grpc_1.sendUnaryData<ListProviderResponse>): void;
        abstract ReadProvider(call: grpc_1.ServerUnaryCall<ReadProviderRequest, ReadProviderResponse>, callback: grpc_1.sendUnaryData<ReadProviderResponse>): void;
        abstract CreateProvider(call: grpc_1.ServerUnaryCall<CreateProviderRequest, CreateProviderResponse>, callback: grpc_1.sendUnaryData<CreateProviderResponse>): void;
        abstract GetToken(call: grpc_1.ServerUnaryCall<LoginRequest, TokenResponse>, callback: grpc_1.sendUnaryData<TokenResponse>): void;
        abstract RegisterUser(call: grpc_1.ServerUnaryCall<RegistrationRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract RefreshToken(call: grpc_1.ServerUnaryCall<RefreshTokenRequest, TokenResponse>, callback: grpc_1.sendUnaryData<TokenResponse>): void;
        abstract RevokeRefreshToken(call: grpc_1.ServerUnaryCall<RefreshTokenRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract RevokeAllRefreshTokens(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
    }
    export class TrafficLightsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTrafficLightsServiceService.definition, "TrafficLightsService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ListProviders: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, ListProviderResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListProviderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListProviderResponse>, callback?: grpc_1.requestCallback<ListProviderResponse>): grpc_1.ClientUnaryCall => {
            return super.ListProviders(message, metadata, options, callback);
        };
        ReadProvider: GrpcUnaryServiceInterface<ReadProviderRequest, ReadProviderResponse> = (message: ReadProviderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ReadProviderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ReadProviderResponse>, callback?: grpc_1.requestCallback<ReadProviderResponse>): grpc_1.ClientUnaryCall => {
            return super.ReadProvider(message, metadata, options, callback);
        };
        CreateProvider: GrpcUnaryServiceInterface<CreateProviderRequest, CreateProviderResponse> = (message: CreateProviderRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateProviderResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateProviderResponse>, callback?: grpc_1.requestCallback<CreateProviderResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateProvider(message, metadata, options, callback);
        };
        GetToken: GrpcUnaryServiceInterface<LoginRequest, TokenResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TokenResponse>, callback?: grpc_1.requestCallback<TokenResponse>): grpc_1.ClientUnaryCall => {
            return super.GetToken(message, metadata, options, callback);
        };
        RegisterUser: GrpcUnaryServiceInterface<RegistrationRequest, dependency_1.google.protobuf.Empty> = (message: RegistrationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.RegisterUser(message, metadata, options, callback);
        };
        RefreshToken: GrpcUnaryServiceInterface<RefreshTokenRequest, TokenResponse> = (message: RefreshTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TokenResponse>, callback?: grpc_1.requestCallback<TokenResponse>): grpc_1.ClientUnaryCall => {
            return super.RefreshToken(message, metadata, options, callback);
        };
        RevokeRefreshToken: GrpcUnaryServiceInterface<RefreshTokenRequest, dependency_1.google.protobuf.Empty> = (message: RefreshTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.RevokeRefreshToken(message, metadata, options, callback);
        };
        RevokeAllRefreshTokens: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, dependency_1.google.protobuf.Empty> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.RevokeAllRefreshTokens(message, metadata, options, callback);
        };
    }
}
